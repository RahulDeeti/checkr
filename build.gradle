
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.8'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.flywaydb.flyway' version('9.5.1')
	id 'jacoco'
	id 'org.sonarqube' version('4.3.0.3225')
}

group = 'com.org'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url 'https://download.red-gate.com/maven/release'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security' // for implementing spring security
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.1' // for entity validations
	implementation 'com.github.javafaker:javafaker:1.0.2' // for generating fake data while testing

	//added these to resolve exception during running tests
//	implementation 'io.micrometer:micrometer-core:1.11.2'



	// these dependencies are for jwt authentication
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'com.wholegrain-software:spring-mongodb-test:1.2.0'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	compileOnly 'org.projectlombok:lombok'
	compileOnly 'org.flywaydb:flyway-core'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

jacoco {
	toolVersion = "0.8.9"
}

test {
	useJUnitPlatform()
	reports.junitXml.required = false
	finalizedBy jacocoTestReport
	jacoco {
		enabled = true
        destinationFile = file('$buildDir/reports/jacoco/test/jacocoTestReport.xml')
	}
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/org/checkr/dto/**",
					"com/org/checkr/entity/**",
					"com/org/checkr/filter/**",
					"com/org/checkr/exception/**",
					"com/org/checkr/config/**"
			])
		}))
	}
	reports {
		xml.required = true
        // xml.enabled true // Enable XML report
        // csv.enabled false // Disable CSV report (optional)
        // html.enabled false // Disable HTML report (optional)
        // xml.destination file("${buildDir}/reports/jacoco/report.xml") // Set the destination for the XML report
    }
}




sonarqube {
	properties {
		property 'sonar.projectKey', 'RahulDeeti_checkr'
		property 'sonar.organization', 'rahuldeeti'
		property "sonar.exclusions", "src/main/java/com/org/checkr/exception/** , src/main/java/com/org/checkr/entity/**, src/main/java/com/org/checkr/filter/** , src/main/java/com/org/checkr/dto/** , src/main/java/com/org/checkr/config/**"
		property 'sonar.sources', 'src/main/java'
		property 'sonar.tests', 'src/test/java'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
	}
}

